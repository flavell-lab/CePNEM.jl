var documenterSearchIndex = {"docs":
[{"location":"fit/#CePNEM-Fitting-API","page":"CePNEM Fitting API","title":"CePNEM Fitting API","text":"","category":"section"},{"location":"fit/","page":"CePNEM Fitting API","title":"CePNEM Fitting API","text":"run_mcmc_10\nnl10d_traces_to_params","category":"page"},{"location":"fit/#CePNEM.run_mcmc_10","page":"CePNEM Fitting API","title":"CePNEM.run_mcmc_10","text":"run_mcmc_10(ys, v, θh, P; n_init=100000, n_iters=11000, lr_adjust=1.1, model=:nl10d)\n\nRun MCMC chain for fitting the CePNEM model to the data.\n\nArguments:\n\nys: Vector of observed neural activity (GCaMP) data.\nv: Vector of observed worm velocity data.\nθh: Vector of observed worm head curvature data.\nP: Vector of observed worm pumping (feeding) data.\nn_init: Number of iterations for the initialization phase of the MCMC chain.\nn_iters: Number of iterations for the MCMC chain.\nlr_adjust: Learning rate adjustment factor.\nmodel: Model to use for the MCMC chain. Can be either :nl10c or :nl10d. It is recommended to use :nl10d.\n\nReturns:\n\ntraces_fit: Vector of traces (ie: fit model parameters) for the MCMC chain.\naccept: Matrix of acceptance rates for the MCMC chain.\nδ_vals: Vector of step sizes for the MCMC chain.\n\n\n\n\n\n","category":"function"},{"location":"fit/#CePNEM.nl10d_traces_to_params","page":"CePNEM Fitting API","title":"CePNEM.nl10d_traces_to_params","text":"nl10d_traces_to_params(traces_fit)\n\nExtracts the free parameters from the traces of the MCMC chain for the nl10d model.\n\nArguments:\n\ntraces_fit: Vector of traces (ie: fit model parameters) for the MCMC chain.\n\nReturns:\n\nA vector of the free parameters extracted from the traces of the MCMC chain for the nl10d model.\n\n\n\n\n\n","category":"function"},{"location":"model/#CePNEM-Model-API","page":"CePNEM Model API","title":"CePNEM Model API","text":"","category":"section"},{"location":"model/","page":"CePNEM Model API","title":"CePNEM Model API","text":"nl10d\nget_free_params","category":"page"},{"location":"model/#CePNEM.nl10d","page":"CePNEM Model API","title":"CePNEM.nl10d","text":"function nl10d(t::Int, v::Array{Float64}, θh::Array{Float64}, P::Array{Float64})\n\nThis function is a probabilistic model that generates a time series of neural data ys given the input data v, θh, and P.\n\nArguments\n\nt::Int: The number of time points in the time series.\nv::Array{Float64}: An array of length t representing the worm's velocity.\nθh::Array{Float64}: An array of length t representing the worm's head curvature.\nP::Array{Float64}: An array of length t representing the worm's pumping (feeding).\n\nReturns\n\n1: A constant value indicating that the function has finished executing.\n\nInternal Variables\n\nc_vT: A scalar variable representing the locomotion direction rectification parameter.\nc_v: A scalar variable representing the velocity coefficient.\nc_θh: A scalar variable representing the head curvature coefficient.\nc_P: A scalar variable representing the pumping coefficient.\nc: A scalar variable representing the constant rectification term. This is disabled (set to 0) in NL10d.\ny0: A scalar variable representing the initial observation.\ns0: A scalar variable representing the timescale parameter of the neuron's encoding to behavior.\nb: A scalar variable representing the bias term.\nℓ0: A scalar variable representing the timescale of the residual Gaussian process model.\nσ0_SE: A scalar variable representing the standard deviation of the squared exponential kernel in the residual Gaussian process model.\nσ0_noise: A scalar variable representing the standard deviation of the observation noise (modeled as white noise).\n\n\n\n\n\n","category":"constant"},{"location":"model/#CePNEM.get_free_params","page":"CePNEM Model API","title":"CePNEM.get_free_params","text":"get_free_params(trace, model)\n\nExtracts the free parameters from a trace of a generative model.\n\nArguments:\n\ntrace: A trace of a generative model.\nmodel: A symbol representing the name of the generative model.\n\nReturns:\n\nAn array of the free parameters of the generative model.\n\nThe get_free_params method takes a trace of a generative model and a symbol representing the name of the generative model as arguments. It then extracts the free parameters from the trace and returns them as an array. The number and names of the free parameters depend on the generative model, but for model NL10d there are 11.\n\n\n\n\n\n","category":"function"},{"location":"sbc/#Simulation-Based-Calibration-API","page":"Simulation-Based Calibration API","title":"Simulation-Based Calibration API","text":"","category":"section"},{"location":"sbc/","page":"Simulation-Based Calibration API","title":"Simulation-Based Calibration API","text":"rank_test\nχ2_uniformtest","category":"page"},{"location":"sbc/#CePNEM.rank_test","page":"Simulation-Based Calibration API","title":"CePNEM.rank_test","text":"rank_test(ground_truth, inferred, n_bins; print_extremes=false, normalize=true)\n\nThis function computes the rank test for a given ground truth and inferred values. It returns the ranks for each bin and each column of the inferred matrix.\n\nArguments:\n\nground_truth: a matrix of size (nsamples, nfeatures) representing the ground truth values.\ninferred: a tensor of size (nsamples, ninferred, n_features) representing the inferred values from the model fit.\nn_bins: an integer representing the number of bins to use for the rank test.\nprint_extremes: a boolean indicating whether to print the ground truth values that are at the extremes of the inferred values.\nnormalize: a boolean indicating whether to normalize the ranks by the number of samples.\n\nReturns:\n\nranks: a matrix of size (nbins, nfeatures) representing the ranks for each bin and each column of the inferred matrix.\n\n\n\n\n\n","category":"function"},{"location":"sbc/#CePNEM.χ2_uniformtest","page":"Simulation-Based Calibration API","title":"CePNEM.χ2_uniformtest","text":"χ2_uniformtest(raw_ranks)\n\nThis function performs a chi-squared test for uniformity on the given ranks.\n\nArguments:\n\nraw_ranks: a vector of raw ranks.\n\nReturns:\n\nThe p-value of the chi-squared test.\n\n\n\n\n\n","category":"function"},{"location":"#CePNEM.jl-Documentation","page":"CePNEM.jl Documentation","title":"CePNEM.jl Documentation","text":"","category":"section"},{"location":"","page":"CePNEM.jl Documentation","title":"CePNEM.jl Documentation","text":"The CePNEM.jl package implements the C. elegans Probabilistic Neural Encoding Model (CePNEM). The most up-to-date version of this model is currently NL10d.","category":"page"},{"location":"","page":"CePNEM.jl Documentation","title":"CePNEM.jl Documentation","text":"Pages = [\"model.md\", \"fit.md\", \"sbc.md\"]","category":"page"}]
}
